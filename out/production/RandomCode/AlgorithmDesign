@Source: http://www.kartikkapur.com/documents/DataStructureDesign.pdf

KartikLand, the Happiest Place in the World.

Problem:
You are a ticket ripper at the happiest place in the world, Kartikland. Each family in your land can rip
exactly one ticket, no more no less. Additionally, you want to rip the tickets of younger people before older
ones, after all, Kartikland is a place for young ins to drag their parents to spend lots of money. Families
may attempt to get around this by sending family members with tickets, but it is up to you, the brave ticket
ripper to prevent them from getting more than one ripped ticket. You are provided the familial connections
of all families in whatever representation you would like. You should be able to rip the tickets of all people
in O(N) time where N is the number of people in line to get their tickets ripped.

Answer:
Let the line of people who want to have their tickets ripped be represented as a Hashmap
of the families, where the key is the current person, and the value is the ArrayList of family
members, represented as the letter H. When the first person in line is found, retrieve the family
from H, and find the minimum value family member in respect to age, and rip their ticket. This
will take O(N) time in the worst case (if that one member is related to everyone in line). Now
create a Hashset represented as the letter S, and add the familial connection to S, presumably the
last name of the family. If the current person in line is already contained in S, then skip over the
person. Otherwise, grab from H and find the minimum of the family, and add up the family
connection to S. This will take O(N) time. When we find the minimum of each family, we essentially
skip over other family members in the line, so if finding the minimum takes O(N) time, then
we no longer have to look at every other family member, and skip over them, since their family
connection is already in S.

Pseudocode:
function void ripTicket(HashMap<Person, List<Person>> line) {
    HashSet<String> familySeen = new HashSet<>();
    for each person in line {
        if person not in familySeen {
            Person smallestAge = min(line.get(person));
            smallestAge.rip();
            familySeen.add(smallestAge.family);
        }
    }
}


Sweet Tooth

Problem:
Pretend that you are the owner of a Sweet Company. Your company makes three sweets- popcorn, candy,
and ice cream. In addition to this, each Sweet Category has their own sub categories. For example, you
can have Vanilla Ice Cream, Chocolate Ice Cream, Banana Ice Cream etc. Each Sweet has a total of N
sub categories. You know how much money each sub category will yield- assume that the money each sub
category will yield is unique.

As an owner trying to make a profit, you want to get lots of money; however, you can only make one
item a day, and you only have M days (where M< N). Your strategy is to pick the sub category of food that
will provide the most money on and then create it that day. You have 2 restrictions though.

• On any 2 consecutive days, you cannot pick items that come from the same Sweet Category. For
example, you cannot create an item from Ice Cream one day and the next day pick another item from
ice cream. This is enforced until the other 2 Sweet Categories are depleted.

• Once you make a subcategory, you cannot make it again. For example, if you make Banana Ice Cream
one day, you can never again make Banana Ice Cream.

Utilize Data Structures that we have discussed earlier to create an algorithm that will allow you to pick the
most profit while following the above constraints. You must take no longer than Mlog(N) to pick all the sub
categories of Sweets you will make. Hint: You cannot simply put everything inside 1 Priority Queue.

Answer:
Create 3 arrays of size N to represent the 3 categories of sweets. We will denote these arrays as
P (popcorn), C (candy), I (ice cream). Add all subcategories in their respective arrays. For example,
put vanilla popcorn in the array P. This will take O(N) time. next, use bottom up max-heapification on P,
C, and I. This will also take O(N) time. Now create 3 different variables to represent the current maximum
of P, C, and I, and three boolean variables to represent if a category has been used on the day before.

On the first day, retrieve the maximum from P, C, and I, and place them into their respective max variables, and
renew the heap property in P, C, and I. retrieving the maximum will take O(1) time as this is a heap property, and
renewing the heap property in P, C, and I will take O(logN) time. Next, use the maximum from the 3 max variables, and
set its respective boolean value to false, and create said max subcategory. On the next day, retrieve the maximum from
the false value, and replace it. Next, find the largest max value among the subcategories that are true. set the
current maximum subcategory to false, and set the maximum subcategory before to true. repeat this process until M days
have been reached.

On the 0th day, it takes O(N) time to initialize all data structures. On the following days, it takes logN time each day
to renew the heap property in each heap taking O(logN) time each day. Therefore, the total overall runtime will take
O(MlogN + N) runtime.

Pseudocode:
function void optimizeSweetsSale(List<Popcorn> P, List<Candy> C, List<IceCream> I, int M) {
    maxHeapifY(P); maxHeapify(C); maxHeapify(I) //O(N) time
    boolean popcorn = true, candy = true, iceCream = true;
    Candy maxP = P.remove(0), maxC = C.remove(0), maxI = I.remove(0);
    renew(P); renew(C); renew(I);
    int day = 0;
    while day <= M {
        int max = maxIfTrue(maxP, maxC, maxI);
        create(max);
        popcorn, candy, iceCream = true;
        set boolean to false from respective max;
        reset respective max var that is now false;
        renewFromMax(max);
        day += 1;
    }
}


Min-nie Mouse and Max-xie Mouse

Problem:
Use or modify a data structure or set of data structures to do the following operations in the provided time:
• insert: O(log(N))
• getSmallest: O(1)
• getLargest: O(1)
• deleteSmallest: O(log(N))
• deleteLargest: O(log(N))

Answer:
Create a binary search tree and denote this tree as B. Create pointers to the smallest and largest values of
B. Insertion into B will take O(logN) time as this is a Binary Search Tree property. If the object we inserted
into B is larger than the largest pointer, or smaller than the smallest pointer, change the pointers respectively.
getSmallest and getLargest will take O(1) time as we have pointers to smallest and largest. For deleteSmallest and
deleteLargest, we will simply delete the smallest or largest from B, taking O(logN) time. We can then set the new
largest/smallest to it's respective values, which will also take O(logN) time.


Oh Hi Mark

Problem:
Imagine you are implementing a basic social media. You want to be able to check if 2 people are friends
in constant time. You also want to be able to see if you can see if 2 people have at least 1 mutual friend
in O(N) time where N is the total amount of people on the social media. Find an efficient solution to this
problem

Answer:
Create a dictionary of people on the social media page, where the keys are Person Objects,
and the Values are sets of People Objects we will denote as D. As an example, let person X and person Y
be friends on the social media page. When they friend eachother, we will grab Person X
from D, and add Person Y to Person X's set. The same will be done for Person
Y's set, but Person X will be added instead. This will take O(1) time.

to see if two people are friends, say Person X and Person Y, we can simply grab both X and Y
from D, and see if Person Y's set contains Person X, and Person X's set contains
Person Y. If this is true, then they are friends on the social media page. This will take
O(1) time.

To see if two people have a mutual friend, say Person X and Person Y, we can grab both
sets of friends from D, and iterate through Person X's set. For each friend in Person X's set,
if Person Y's set contains said friend, return True. Otherwise, if no such friend exists
in person Y's set, return false. This will take O(N) time in the worst case(Person X is
friends with everyone).


Colise-Yum

Problem:
You are the rich Roman Emperor Jewelius Caesar. You want to build arenas (possibly more than one) so
your subjects can watch gladiator duels and eat wild boars.

• You have V locations where you can build arenas and it costs vi denarius’s to build an arena in the
ith location.

• Additionally, any location that does not have an arena must have a path to an arena. You are provided
a set of roads, denoted by E, that you can build between any 2 locations i and j, along with their cost
denoted by eij.

Find or modify an algorithm that will minimize the amount of denarius’s your kingdom will spend while still
fulfilling your constraints.

Answer:
For this algorithm, we can consider using a minimum spanning tree, where vertices will be arenas, and edge
weights will be the cost to build arena Va, arena Vb, and the cost to build between Va and Vb. We want to
consider the cheapest methods, thus, when we consider distance from the tree; this is the cost of building
the said path.

Next, we must construct each edge. Because there are V possible edges for each V, the cost of constructing all
edges will cost O(V^2). Next, we will sort all edges similar to Kruskal's algorithm. The most optimal comparison
sort we can use takes O(NlogN) time, thus, using a comparison sort, sorting will take O(V^2 * log(V^2)) time, or
O(V^2logV) time. However, if we consider radix sort, assuming denarius is some sort of number currency, then
sorting will take O(V^2) time. Because kruskal's algorithm requires a disjoint set however, the runtime would still
take O(V^2logV) time.

After we create the Minimum Spanning Tree from kruskal's algorithm, we have created the optimal paths of all
arenas.


Land Lubber? Sea Lubber? Air Lubber? Just Lubber

Problem:
You are an avid traveler who wants to travel between the 2 cities in your country which consists of V cities.
To go between these cities you have decided that you can narrow down your modes of transportation to
dinghy sailing, gliding, and unicycling. For every city in the country, you are given a list of cities that you
can get to- this list remains constant regardless of which mode of transportation you pick. The set of all
sailing costs is labeled as Es, the set of all gliding costs is given ans Eg, and the cost of all unicycling costs
is the set Eu.
Sadly, you get sea/air/landsick quite frequently so you cannot take the same mode of transportation
consecutively- in other words you cannot go into city i with unicycling and leave unicycling. Find an
algorithm that computes the fastest route from city i to city j with your constraints.

Answer:
For this algorithm, consider using dijkstra's algorithm to find the shortest paths tree of all cities
from city i to city j.

First, create a Node object that will contain three boolean values on whether you can use a mode of transportation.
At the start node, where you are first located, have all booleans be set to True. Dijkstra's algorithm requires a graph; we
will denote the graph that is currently being built as graph G. From the starting point, create edges in G for each true
travel option toward the next city in the set, where path weights will be the cost to travel with the given travel option.
When we create a Node to a new city, we will set all boolean values to true except for the mode of transport that was
used to get to the city. From there repeat this process until the set of cities is exhausted.

Next, we can run dijkstra's algorithm to find the shortest path from the start location to all cities using these modes of
transportation.


National Bongoola Association

Problem:
You are the coach of a prestigious Bongoola team. Your job as coach is to make sure that, at any given
time, the best players on your team for each positions are on the field. Bongoola, being a great community
team sport, invites all people of the community to join. Each player will be assigned a position that they
can play- there are a total of M positions- and a unique team number. For this problem, we will use N to
be the total amount of people on your team and P to be the people signed up for a certain position.

You have your starting M players, but as the game progresses, you will need to replace them. You will
base your replacement of people using the bodacious factor. During the game, only 1 player’s bodacious
factor goes down, and once they are benched, their bodacious factor doesn’t change. Every Z minutes, 1
player on the field will have their bodacious factor decrease by some unknown amount and you will be able to
replace the player if needed. Once the next eligible player’s (a player who plays the same position) bodacious
factor exceeds the current player, they are considered a better choice. You are guaranteed that only 1 of the
players at a time will need to be replaced. Finding all the players on your current lineup should take Θ(M)
time, changing a player’s bodacious factor should take Θ(1) time, replacing a player should take Θ(log(P))
time, and putting a new player in the current lineup should take Θ(1) time.

Write a detailed description of what data structures you will use to make the operations stated above
run in the provided time. State any assumptions you need to regarding anything (no you cannot assume
that everything is done by some magical warlock).

Answer:
Key points we should notice:
There are a total of M positions, a total of N teammates, and a total of P people in each position.
We want the people with the largest bodaciousness in each position.
Every Z minutes, 1 player on the field will have their bodaciousness lowered.

iterating through the current lineup should take O(M) time
changing bodacious factor on the field should take O(1) time
replacing a player should take O(logP) time.
placing a new player should take O(1) time.

Consider the usage of both a dictionary, in particular a hashmap, and a priority queue, in this case,
a max heap.

First, we will initialize M priority queues to represent each position on the field. Because
there are N players, and each position contains P players, we can say that initializing M priority queues
will take O(NlogP) time, as we use a binary max heap. This will mainly be used for replacing players, as
finding the next best player at position M will O(logP). Removing the largest player and reinserting the
replaced player takes O(logP) time.

Second, we will initialize a dictionary with keys as the unique number value of each teammate, and the values
as the Player object on the team. Iterating through the entire lineup will take O(M) time, as this is simply
iterating through the hashmap. Changing a player's bodacious factor will take O(1) time, as retrieving the player
based off player number will take O(1) time. Placing a new player in the lineup will take O(1) time as well, as
removing from the hashmap takes O(1) time, and adding to the hashmap also takes O(1) time.


Future Roaming

Problem:
You are a croissant delivery boy in the 31st century. You want to deliver your croissants as quickly as
possible; however, because you lost your client’s addresses and they live all across the galaxy, so you don’t
want to go door to door. You have the phone numbers of all the people who ordered croissants from
you, so you will attempt to use this to figure out in where you should go. Each phone number is about
100000000000000000000000 digits long and you have a total of N clients. You will use the following information
about telephone numbers to help:

1. The sector code (the leftmost 10 digits) will allow you to figure out which sector a client is in. On
average, there are a total of √N households you need to deliver to in the sectors.

2. In the 31st century, telephone numbers have a cool feature where the difference between the last 4 digits
of any 2 telephone numbers in the same sector is equal to the distance between their two corresponding
households.

3. You know the address of 1 of the houses you need to go in each sector.

You want to go to sectors based off how many of your clients are in them and how close it is . If a sector
has 5 clients and is 2 Megadistances away, it is more appealing than a sector that has 1 client and is 1
Megadistance away. If a sector has 6 clients and is 2 Megadistances away, it is less appealing than a sector
with 9 clients and 3 Megadistances. If a sector has 4 clients and it is 2 Megadistances away, it is considered
equal to a sector that has 2 clients that is 1 MegaDistance away, at this point, you just pick which one to
go to randomly . You will deliver to all the households in that sector before going to the next sector. You
also know how many megadistances are between each sector, and you can assume that you will start at a
location that is equidistant from all the sectors.

Provide an implementation where figuring out which households are in which sector in Θ(N) time, figuring out the
distance between a house and all the other houses in a sector, must take, on average, O(N) time, and delivering
croissants to all the households on average, O(N^(3/2)log N) time.

Assume that the time it takes you to walk 1 Minidistance (inside of a sector) is the same amount of time
it takes your spaceship to travel one Megadistance (between sectors). Justify why your design works in the
given time.

Answer:
Things to consider:
If there are N sectors to consider, there is only 1 house per sector
If there is only 1 sector to consider, there are N houses in that sector
If there is sqrt(N) sectors to consider, there are sqrt(N) houses to consider.6
